// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/ParticleSnapshot.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace StardustProtos {

  /// <summary>Holder for reflection information generated from protos/ParticleSnapshot.proto</summary>
  public static partial class ParticleSnapshotReflection {

    #region Descriptor
    /// <summary>File descriptor for protos/ParticleSnapshot.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ParticleSnapshotReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch1wcm90b3MvUGFydGljbGVTbmFwc2hvdC5wcm90bxIOc3RhcmR1c3RQcm90",
            "b3MijAIKEFBhcnRpY2xlU25hcHNob3QSCQoBeBgBIAEoAhIJCgF5GAIgASgC",
            "EgoKAnZ4GAMgASgCEgoKAnZ5GAQgASgCEhAKCHJvdGF0aW9uGAUgASgCEg0K",
            "BW9tZWdhGAYgASgCEhAKCGluaXRMaWZlGAcgASgCEgwKBGxpZmUYCiABKAIS",
            "DQoFc2NhbGUYCyABKAISDQoFYWxwaGEYDCABKAISDAoEbWFzcxgNIAEoAhIO",
            "CgZpc0RlYWQYDiABKAgSDgoGY29sb3JSGA8gASgCEg4KBmNvbG9yRxgQIAEo",
            "AhIOCgZjb2xvckIYESABKAISHQoVY3VycmVudEFuaW1hdGlvbkZyYW1lGBIg",
            "ASgFIkgKEVBhcnRpY2xlU25hcHNob3RzEjMKCXBhcnRpY2xlcxgBIAMoCzIg",
            "LnN0YXJkdXN0UHJvdG9zLlBhcnRpY2xlU25hcHNob3RiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::StardustProtos.ParticleSnapshot), global::StardustProtos.ParticleSnapshot.Parser, new[]{ "X", "Y", "Vx", "Vy", "Rotation", "Omega", "InitLife", "Life", "Scale", "Alpha", "Mass", "IsDead", "ColorR", "ColorG", "ColorB", "CurrentAnimationFrame" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::StardustProtos.ParticleSnapshots), global::StardustProtos.ParticleSnapshots.Parser, new[]{ "Particles" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ParticleSnapshot : pb::IMessage<ParticleSnapshot> {
    private static readonly pb::MessageParser<ParticleSnapshot> _parser = new pb::MessageParser<ParticleSnapshot>(() => new ParticleSnapshot());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ParticleSnapshot> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::StardustProtos.ParticleSnapshotReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParticleSnapshot() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParticleSnapshot(ParticleSnapshot other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      vx_ = other.vx_;
      vy_ = other.vy_;
      rotation_ = other.rotation_;
      omega_ = other.omega_;
      initLife_ = other.initLife_;
      life_ = other.life_;
      scale_ = other.scale_;
      alpha_ = other.alpha_;
      mass_ = other.mass_;
      isDead_ = other.isDead_;
      colorR_ = other.colorR_;
      colorG_ = other.colorG_;
      colorB_ = other.colorB_;
      currentAnimationFrame_ = other.currentAnimationFrame_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParticleSnapshot Clone() {
      return new ParticleSnapshot(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "vx" field.</summary>
    public const int VxFieldNumber = 3;
    private float vx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Vx {
      get { return vx_; }
      set {
        vx_ = value;
      }
    }

    /// <summary>Field number for the "vy" field.</summary>
    public const int VyFieldNumber = 4;
    private float vy_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Vy {
      get { return vy_; }
      set {
        vy_ = value;
      }
    }

    /// <summary>Field number for the "rotation" field.</summary>
    public const int RotationFieldNumber = 5;
    private float rotation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Rotation {
      get { return rotation_; }
      set {
        rotation_ = value;
      }
    }

    /// <summary>Field number for the "omega" field.</summary>
    public const int OmegaFieldNumber = 6;
    private float omega_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Omega {
      get { return omega_; }
      set {
        omega_ = value;
      }
    }

    /// <summary>Field number for the "initLife" field.</summary>
    public const int InitLifeFieldNumber = 7;
    private float initLife_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float InitLife {
      get { return initLife_; }
      set {
        initLife_ = value;
      }
    }

    /// <summary>Field number for the "life" field.</summary>
    public const int LifeFieldNumber = 10;
    private float life_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Life {
      get { return life_; }
      set {
        life_ = value;
      }
    }

    /// <summary>Field number for the "scale" field.</summary>
    public const int ScaleFieldNumber = 11;
    private float scale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Scale {
      get { return scale_; }
      set {
        scale_ = value;
      }
    }

    /// <summary>Field number for the "alpha" field.</summary>
    public const int AlphaFieldNumber = 12;
    private float alpha_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Alpha {
      get { return alpha_; }
      set {
        alpha_ = value;
      }
    }

    /// <summary>Field number for the "mass" field.</summary>
    public const int MassFieldNumber = 13;
    private float mass_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Mass {
      get { return mass_; }
      set {
        mass_ = value;
      }
    }

    /// <summary>Field number for the "isDead" field.</summary>
    public const int IsDeadFieldNumber = 14;
    private bool isDead_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsDead {
      get { return isDead_; }
      set {
        isDead_ = value;
      }
    }

    /// <summary>Field number for the "colorR" field.</summary>
    public const int ColorRFieldNumber = 15;
    private float colorR_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ColorR {
      get { return colorR_; }
      set {
        colorR_ = value;
      }
    }

    /// <summary>Field number for the "colorG" field.</summary>
    public const int ColorGFieldNumber = 16;
    private float colorG_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ColorG {
      get { return colorG_; }
      set {
        colorG_ = value;
      }
    }

    /// <summary>Field number for the "colorB" field.</summary>
    public const int ColorBFieldNumber = 17;
    private float colorB_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ColorB {
      get { return colorB_; }
      set {
        colorB_ = value;
      }
    }

    /// <summary>Field number for the "currentAnimationFrame" field.</summary>
    public const int CurrentAnimationFrameFieldNumber = 18;
    private int currentAnimationFrame_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrentAnimationFrame {
      get { return currentAnimationFrame_; }
      set {
        currentAnimationFrame_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ParticleSnapshot);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ParticleSnapshot other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Vx != other.Vx) return false;
      if (Vy != other.Vy) return false;
      if (Rotation != other.Rotation) return false;
      if (Omega != other.Omega) return false;
      if (InitLife != other.InitLife) return false;
      if (Life != other.Life) return false;
      if (Scale != other.Scale) return false;
      if (Alpha != other.Alpha) return false;
      if (Mass != other.Mass) return false;
      if (IsDead != other.IsDead) return false;
      if (ColorR != other.ColorR) return false;
      if (ColorG != other.ColorG) return false;
      if (ColorB != other.ColorB) return false;
      if (CurrentAnimationFrame != other.CurrentAnimationFrame) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= X.GetHashCode();
      if (Y != 0F) hash ^= Y.GetHashCode();
      if (Vx != 0F) hash ^= Vx.GetHashCode();
      if (Vy != 0F) hash ^= Vy.GetHashCode();
      if (Rotation != 0F) hash ^= Rotation.GetHashCode();
      if (Omega != 0F) hash ^= Omega.GetHashCode();
      if (InitLife != 0F) hash ^= InitLife.GetHashCode();
      if (Life != 0F) hash ^= Life.GetHashCode();
      if (Scale != 0F) hash ^= Scale.GetHashCode();
      if (Alpha != 0F) hash ^= Alpha.GetHashCode();
      if (Mass != 0F) hash ^= Mass.GetHashCode();
      if (IsDead != false) hash ^= IsDead.GetHashCode();
      if (ColorR != 0F) hash ^= ColorR.GetHashCode();
      if (ColorG != 0F) hash ^= ColorG.GetHashCode();
      if (ColorB != 0F) hash ^= ColorB.GetHashCode();
      if (CurrentAnimationFrame != 0) hash ^= CurrentAnimationFrame.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Vx != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Vx);
      }
      if (Vy != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Vy);
      }
      if (Rotation != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Rotation);
      }
      if (Omega != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(Omega);
      }
      if (InitLife != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(InitLife);
      }
      if (Life != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(Life);
      }
      if (Scale != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(Scale);
      }
      if (Alpha != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(Alpha);
      }
      if (Mass != 0F) {
        output.WriteRawTag(109);
        output.WriteFloat(Mass);
      }
      if (IsDead != false) {
        output.WriteRawTag(112);
        output.WriteBool(IsDead);
      }
      if (ColorR != 0F) {
        output.WriteRawTag(125);
        output.WriteFloat(ColorR);
      }
      if (ColorG != 0F) {
        output.WriteRawTag(133, 1);
        output.WriteFloat(ColorG);
      }
      if (ColorB != 0F) {
        output.WriteRawTag(141, 1);
        output.WriteFloat(ColorB);
      }
      if (CurrentAnimationFrame != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(CurrentAnimationFrame);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Vx != 0F) {
        size += 1 + 4;
      }
      if (Vy != 0F) {
        size += 1 + 4;
      }
      if (Rotation != 0F) {
        size += 1 + 4;
      }
      if (Omega != 0F) {
        size += 1 + 4;
      }
      if (InitLife != 0F) {
        size += 1 + 4;
      }
      if (Life != 0F) {
        size += 1 + 4;
      }
      if (Scale != 0F) {
        size += 1 + 4;
      }
      if (Alpha != 0F) {
        size += 1 + 4;
      }
      if (Mass != 0F) {
        size += 1 + 4;
      }
      if (IsDead != false) {
        size += 1 + 1;
      }
      if (ColorR != 0F) {
        size += 1 + 4;
      }
      if (ColorG != 0F) {
        size += 2 + 4;
      }
      if (ColorB != 0F) {
        size += 2 + 4;
      }
      if (CurrentAnimationFrame != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CurrentAnimationFrame);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ParticleSnapshot other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Vx != 0F) {
        Vx = other.Vx;
      }
      if (other.Vy != 0F) {
        Vy = other.Vy;
      }
      if (other.Rotation != 0F) {
        Rotation = other.Rotation;
      }
      if (other.Omega != 0F) {
        Omega = other.Omega;
      }
      if (other.InitLife != 0F) {
        InitLife = other.InitLife;
      }
      if (other.Life != 0F) {
        Life = other.Life;
      }
      if (other.Scale != 0F) {
        Scale = other.Scale;
      }
      if (other.Alpha != 0F) {
        Alpha = other.Alpha;
      }
      if (other.Mass != 0F) {
        Mass = other.Mass;
      }
      if (other.IsDead != false) {
        IsDead = other.IsDead;
      }
      if (other.ColorR != 0F) {
        ColorR = other.ColorR;
      }
      if (other.ColorG != 0F) {
        ColorG = other.ColorG;
      }
      if (other.ColorB != 0F) {
        ColorB = other.ColorB;
      }
      if (other.CurrentAnimationFrame != 0) {
        CurrentAnimationFrame = other.CurrentAnimationFrame;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Vx = input.ReadFloat();
            break;
          }
          case 37: {
            Vy = input.ReadFloat();
            break;
          }
          case 45: {
            Rotation = input.ReadFloat();
            break;
          }
          case 53: {
            Omega = input.ReadFloat();
            break;
          }
          case 61: {
            InitLife = input.ReadFloat();
            break;
          }
          case 85: {
            Life = input.ReadFloat();
            break;
          }
          case 93: {
            Scale = input.ReadFloat();
            break;
          }
          case 101: {
            Alpha = input.ReadFloat();
            break;
          }
          case 109: {
            Mass = input.ReadFloat();
            break;
          }
          case 112: {
            IsDead = input.ReadBool();
            break;
          }
          case 125: {
            ColorR = input.ReadFloat();
            break;
          }
          case 133: {
            ColorG = input.ReadFloat();
            break;
          }
          case 141: {
            ColorB = input.ReadFloat();
            break;
          }
          case 144: {
            CurrentAnimationFrame = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ParticleSnapshots : pb::IMessage<ParticleSnapshots> {
    private static readonly pb::MessageParser<ParticleSnapshots> _parser = new pb::MessageParser<ParticleSnapshots>(() => new ParticleSnapshots());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ParticleSnapshots> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::StardustProtos.ParticleSnapshotReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParticleSnapshots() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParticleSnapshots(ParticleSnapshots other) : this() {
      particles_ = other.particles_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParticleSnapshots Clone() {
      return new ParticleSnapshots(this);
    }

    /// <summary>Field number for the "particles" field.</summary>
    public const int ParticlesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::StardustProtos.ParticleSnapshot> _repeated_particles_codec
        = pb::FieldCodec.ForMessage(10, global::StardustProtos.ParticleSnapshot.Parser);
    private readonly pbc::RepeatedField<global::StardustProtos.ParticleSnapshot> particles_ = new pbc::RepeatedField<global::StardustProtos.ParticleSnapshot>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::StardustProtos.ParticleSnapshot> Particles {
      get { return particles_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ParticleSnapshots);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ParticleSnapshots other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!particles_.Equals(other.particles_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= particles_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      particles_.WriteTo(output, _repeated_particles_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += particles_.CalculateSize(_repeated_particles_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ParticleSnapshots other) {
      if (other == null) {
        return;
      }
      particles_.Add(other.particles_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            particles_.AddEntriesFrom(input, _repeated_particles_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
